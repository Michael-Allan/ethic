#!/usr/bin/env --split-string=${JDK_HOME}/bin/java --source ${JDK_VERSION}
package scratch;

import static java.lang.Double.parseDouble;
import static java.lang.System.err;
import static java.lang.System.exit;
import static java.lang.System.out;


/** A calculator of the probability of an event occuring, summed over a large number of trials,
  * where the rate of occurence changes (decays or grows).
  */
class CumulativeProbability {


    public static void main( final String[] arguments ) {
        exitOnDemand( arguments );
        final int n = arguments.length;
        if( n != 2 ) {
            err.println( commandName + ": Expecting 2 arguments, found " + n );
            exitWithUsage( 1 ); }
        new CumulativeProbability().run( /*r*/parseDouble(arguments[0]),
                                         /*c*/parseDouble(arguments[1]) ); }



////  P r i v a t e  ////////////////////////////////////////////////////////////////////////////////////


    static final String commandName = "cumulative-probability";



    static void exitOnDemand( final String[] arguments ) {
        for( final String arg: arguments ) {
            if( arg.equals("-?") || arg.equals("-help") ) exitWithUsage( 0 ); }}



    static void exitWithUsage( final int status ) {
        out.println( commandName + ": Probability of an event with a changing rate of occurence" );
        out.println( "Usage: " + commandName + " <rate> <change coefficient>" );
        out.println( "       " + commandName + " -help | -?" );
        exit( status ); }



    /** Cumulative probability of occurence.
      */
    double pCumulative;



    /** Cumulative probability of non-occurence at last trial.
      */
    double qCumulativeLast = 1d;



    /** Rate of occurence at last trial.
      */
    double rLast;



    /** @param r Rate of occurence, initial value.
      * @param c Coefficient of change per trial.  A value of 1 means a constant `r` through all trials.
      */
    void run( double r, final double c ) {
        do {
            qCumulativeLast *= 1d - rLast;
            final double pJustNow/*probability of occurence on just the present trial*/ =
              qCumulativeLast/*probability of non-occurence on a previous trial*/ * r/*occurence rate*/;
            pCumulative += pJustNow;
            if( t == tReport ) {
                out.println( pCumulative + "\tt " + t );
                if( tReport < 10 ) tReport += 1;
                else if (tReport == 10 ) tReport = trialReportInterval;
                else tReport += trialReportInterval; }
            rLast = r;
            r *= c;
            ; } while( ++t <= trialsMaximum ); }



    /** Trial number.
      */
    int t = 1;



    /** Trial number for the next report.
      */
    int tReport = t;



    static final int trialReportInterval = 1000;



    static final int trialsMaximum = trialReportInterval * 10; }
